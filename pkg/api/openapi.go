// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Annotations defines model for Annotations.
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody CreateCluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/docs", wrapper.Docs)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/openapi.json", wrapper.Openapi)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
