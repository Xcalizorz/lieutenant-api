// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Cluster configuration catalog Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	SshDeployKey *string `json:"sshDeployKey,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Tenant configuration Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------
	if paramValue := ctx.QueryParam("tenant"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------
	if paramValue := ctx.QueryParam("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
