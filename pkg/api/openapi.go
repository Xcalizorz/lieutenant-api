// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/docs", wrapper.Docs)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/openapi.json", wrapper.Openapi)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
