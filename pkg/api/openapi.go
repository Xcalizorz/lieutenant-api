// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Annotations defines model for Annotations.
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Git revision to use with the tenant configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	TenantGitRepoRevision *string `json:"tenantGitRepoRevision,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Revision defines model for Revision.
type Revision struct {

	// Revision to use with a git repository.
	Revision *string `json:"revision,omitempty"`
}

// RevisionedGitRepo defines model for RevisionedGitRepo.
type RevisionedGitRepo struct {
	// Embedded struct due to allOf(#/components/schemas/GitRepo)
	GitRepo
	// Embedded struct due to allOf(#/components/schemas/Revision)
	Revision
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string            `json:"displayName,omitempty"`
	GitRepo     *RevisionedGitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// Full URL of the global configuration git repo
	GlobalGitRepoURL *string `json:"globalGitRepoURL,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody CreateCluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/docs", wrapper.Docs)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/openapi.json", wrapper.Openapi)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
