// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
