// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// URL to Kubernetes API endpoint of the registered Kubernetes cluster
	ApiEndpoint *string `json:"apiEndpoint,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Cluster configuration catalog Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// Identification of the cluster (shortname or slug)
	Name string `json:"name"`

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	SshDeployKey *string `json:"sshDeployKey,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Tenant configuration Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// Identification of the tenant (shortname or slug)
	Name *string `json:"name,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------
	if paramValue := ctx.QueryParam("tenant"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------
	if paramValue := ctx.QueryParam("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
