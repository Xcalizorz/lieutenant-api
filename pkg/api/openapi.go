// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xba1PbOrf+KxqfM9N2n5BAoT0DM3veHaCFtBQoCbTdhRkUeyUWyJKR5ITQyX9/Rxc7",
	"vuVCC937G7FlraV1ffRI/PB8HsWcAVPS2/nhxVjgCBQI82uPJlKB6ASn6WP9NADpCxIrwpm34+0TqQjz",
	"FSIB4gOkQkC+/azpNTyih8RYhV7DYzgCb8fz00m9hifgLiECAm9HiQQanvRDiLAW8r8CBt6O9z+tmX4t",
	"+1a2OoE3nTa8HjDM1GOVU+arObopN+WvqTbVX8uYMwnGjPswwAlV+k+fMwXM/InjmBIfa01bN1Kr+2NF",
	"IWeA9XgjqLjeNgqsLJQqgMZEhQgjYb5pGsO5eXIeNvpQejLwdr4vlp2FhDdtrDTyVPAYhCIgvenVtJFK",
	"fI99G3HFBZjHCPd5ohBOAwnx/g34qom6CiviY0onyOdsQIaJgADdwqQ1wjQBFGMipHYt3OMopmAsTnkS",
	"eDseHkuv4QVEKkH6iRPHY2AyJAO1ZTw+tE8hWRuDVGsb3rThqUmsI8Oq4M0W0AlMvsxWt/PDI8GKoTsL",
	"ru/6o6v5Yk4LAsreTg0UwIDoh6mlLlkvBHRAdBzEXBLFxQQRiRKZGOtFmOEhBKg/MTnRPu0gzAKEE8WH",
	"wEBgBYGbRMpwH2LKJx9hgsaEUtSH/PddBWMsgkvmNUrWCIiMKZ4cm9SqyUz9Eum3pbqR95/3aYJGoJWP",
	"Yi4UZio3ytlMe5QNtc0GaVCtEJc2AKcNb0jUGcR82WcHbthUFw6pMKXnZ0fVdZ2fHSHF0QCUHyI3UJuL",
	"DEAqiQZcpBbLnIeHwFQT9UIirYE5oxNtZQkKkYJpXkik+C0w7Uup9NgRpiQohLwXKhXLnVYLx6QpJ6w5",
	"kiFrMlAtp05LWgWauur8x8z352Wyvr7pS/AFqJ5+Yh6AyQocnDA6Setgxei2ZlYt0SmVXKT0AtNF94Fy",
	"NtTLKeiO4YHzt1XflnLGyazLm4OZO4v67LmKYSpuKTcaWWZk4Z/LjWpkpwlRldLtHqI46VPi67qEWsiO",
	"NT+08936/YIyPlaY8mFJKRcSTrTJ32reFV0vZbgGwes3bza2Ubvdbu9tHj/gvQ36935n47j37o1+1tk/",
	"2MZvvoyPkrF//+lsEhzfdbb4IHn4mvhi92N8cDI6vdg+PdkaJjcmqyseD7lUH2Ei61d/y/iYIT1GpgEw",
	"JApJECMQ6GWUUEUoYYBiLiXpUzB2MY9jCtpQ8lVhUUOiKO43fR6hldbXHiR7hx8vejd3yf1Ivd379FYF",
	"B1vdo3hjV7EWO4HDw3dvzk8ezoLBJctNDn4g8ZoM8es1RqSKX795a4S8e31x8/fhcXj09Zh/63VUP6IP",
	"wWF7ctz7ZuQVf+/u7r7vfrp7+AAX2+L84Xzr9gtRBzdwtnX6pYtfb3dP7z5sDC5uQ3WzeTjevr85uvh6",
	"8U2cb3+m376Ik6Ovu/Hntx+/3PRvevu9YP+W8/D9w7D/7tuf9c6wD7QjHMjwdBX3ysigG4NPBgSkrijY",
	"RBmSIU9oUKrnqb80UhGcUhBN1Ea2v/IBepEwN/gFigAziYh6IRHjSk+Sm2P2fTHBrXKVZSSC1qCBhFKk",
	"K2oujrTm5ZjfabWGRP01JCpMjC9b2I/A5yLWz3ks16JJCkqHRNWWl0ohsQ2+3HETRu60JcwwRAJgSptV",
	"IDtVE7UTxaMMptSVE6QzXoBN/ZeEmecDLiJ06dk6TEEpELYEr9lHONACyQgKTxlPWOFBQIZESfvo0kPj",
	"EAQg3YLslBJhAYjyMQgfS2igCN+jt5vID7HAvhmg9eEK01dNE29Ly3+HjYDpclXTAdJXKMAKayfiXPcu",
	"llR/BkQrIkheRMlPpcaQTlPXGRxsrnGqBcemDs2Ae1lDMedzDZLcBBFIiYdQCM9d8HEiTe7YUXJpd3OS",
	"6tbQy5rtanA93SMtRet2YBmsZ58/K9StyK5xkcMQVaDbUcjHzOEJDb0w4yoEkaEOruOfj4133bOQgMDC",
	"DwnIp4LKbUrRzEII7n2IFdLbSpNy3KwE03zuN38WM7McZnZIKB9xbT8CtMdF3KwrtI+Hu/MAXq8E7dzf",
	"c5CdafC6JOvddkIp7uvHtUWlWo31phX8RBA16WoFrbF2AQsQ7USF+lff/HrPRYR1F/zwpee5ra6eyb6d",
	"GUSDZLuDJmzA06059s06IcKEejvm1V8GPvs5kuCie3iM2geea1oZ3k4HVnblp4KbbtGdMPTJhFMETDlk",
	"SYkPTBpvu/l3u/toc22PmrJx5F6Xhfkh5xKw+9r0PPe3bPVlsLa55psJWsaDRBkfHBFInJes8BEIaXVc",
	"b643zX5Xb4lxTLwdb7O53nytIxSr0Ni75aqr+TGEmpA4IlLpyEwHIjzCxLgauT5n5eqQNzmgS4v5ai+d",
	"ulHgoL5XIAGhevuQCdBpaVdEgvqdhKF57hIQkzLP4+VZnXIMXpVInNfr648icIiCaNW9aI5nwELgSR21",
	"44YiaiitYRO9i2I1QWa8xnSMO0PkjN60sZixT3WqZItspTSVybYkirBuuN4ZqEQwibCRnHeuKS94KAt9",
	"d9rwYi5rQmNPVz3IkTqzgLhkf6DOvi66tXCpBJH8X0dElwwZUKRnHXMRPAYWaWX3QvBvZbo3d/EH90Rv",
	"efow4AJckdcdKUzRYgOZxjQmEtAAEyr1VAduxdIMvHZevk4Bpm41kttyb4D2rF3s6FX8ga7tMl291jDf",
	"rvXave5zrqQSODbb+muL5KVpPcUstA7ay/CZbtwg1S4PJk/GXNZwgjWRnkYKgzEq6jMjZKeV9Nx4ai0X",
	"ZaFxL2hY5W09sjD8HLObCcZM77X6UFThTU3CpfQS1Rh+4uLzCSqC9Y90DsrRcZVaMG3MekbrR0b8T62y",
	"FJRpe8Uw3DfPZ24vdYM6hWdDWjUnFjWVfGu+taxazqqbv9GxRjCxu5A+CQJgT+Aqa0xZ2HfVlWzXzIue",
	"OAD1vG5Y/50ZO+AJc27dWkSlm/MSXYulY0wCRAI0xpbjMLM8aVu1HG4Csrw/rm2tWPlh1VPncYCfIWdW",
	"qf8RiCGsGb3+7xl6gV1Z0Tm5bZbiphKGlnl6efZ+D/3/5vbbVyu0i98afIlZxj9QVazgJ60p1iXLaoou",
	"/SFgqsKH3G6hGLaH7v1S3yi4V62YYlKyzQzt89saVqV6PEqpRpkDwuDnDeH2od7O96u8WTRStQtGvoaH",
	"OavIiVQQOaPUHcLM3U+18ywD+tA9OTa8KiZMQ8sUwjKAAAI0S2nDdYR4pAelp01JbMCkSJj+1kBulSFP",
	"wZNhaOabbdj2CoevJtcGhAU5QIsinfYpyHUHUw6rE6AButY1tFlEoE0z7roGRqcHW+ZIC700U8j6OcyQ",
	"a7OgBZLMqHOmCL02sL0zsHM3sn2GRd3OJZaQNUbuYwkB4gxhpCCKqc4hxbPzvNSmbrEu6vMijGrOX45j",
	"l4nvg5SDhNKJ7vZkBAKChjnlW2Iyt1zF0fUAU6mxfQW+d6xuTrVl2+gOI4pgijJB1vzztsvu3fPtlst8",
	"TyV1PyZ9EMyAmdlpatUljbxD7MmqLbobNfyVC1hj3bnIIE2DrPs/eeVIoYDWPI0sEzqFuExXnasrmfNi",
	"7YS0vOS48tqq+1n7dsbaLw2UAU3uPx8hExLulKNAtHTfHb3b66Gjdrf30vFJDXPp4hV6f3byCWVHL3OC",
	"6+5ZA2shQ50ZoSbgPtv16qTV1fUJIR8pHotg3+ciIJa8Tm2TunjmzjyzUof+8h59jq37QmMtPulZaee+",
	"cEKpuHgSH3wRREHJA3PMrbPJMWpL+U7Ticvs2zLKs+cm/8UIzzLxe+n4wNslw+wcIKP9MwY5d1raJ0Nz",
	"WOrzKOIBF7Bm7ye4w1ISzPjUaaMsZXbcgF52k75jw/gApeJfLROfHdYuks/lpg+b3uw4ItPoqrEa2erO",
	"zlbgWu3IfwHV6sTkmdb06styojXlxbMobD6OaFX/PNFaYketXzJy1KkrcQTmTEzG2AeEZbYgkTBDsvY0",
	"Jkik4hEId3OwfOL30giYx6W+0jbD+ZN9vbKcEVO8mF6/LN7v4QIlMsXJseAjovF6ysQa1HjtMuTaSHKU",
	"nYaGuQPDho68uTpml/NwEEAwl+DtpUcfz9EkqqfIS+hdldfmV9nd3K3PeSXqSUrR7JJaWopmh5vTxqNM",
	"taD6/HaKOZW7MsPsPnhmgjkLkUoFzHXo1o/06vYK5HKWAo/jyar3zVejlnvp1YXfzCzn5T4fsTzfPfNp",
	"5ed0wPoTF7MFll1GKbsG/A8zyosctJBPfmIvPS+bvErncWRy3i3/Ni55acz9dia5IPeZiOQFJb7ImxTv",
	"/Hy/0pFlLxbb0CzekalcgPcW3czJXY45FTxIfFM09eZN73kqM68FMPq52XsgVWne6rdH3McUBTACyuPI",
	"0FhXmX1+VO6xFD/OXTKabSKMuOL/YC35MLvuk/uyyDnNO3Yojsp9TnIsRf2ns725IhE4ZG226blpHKNe",
	"4fdPO8i9ml5N/xsAAP//6R/8ttw2AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
