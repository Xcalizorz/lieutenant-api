// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//6600X7c3AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
