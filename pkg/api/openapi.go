// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/57mNKtyNQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
