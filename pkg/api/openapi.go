// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------
	if paramValue := ctx.QueryParam("tenant"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------
	if paramValue := ctx.QueryParam("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
