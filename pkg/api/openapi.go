// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Cluster configuration catalog Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Tenant configuration Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------
	if paramValue := ctx.QueryParam("tenant"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------
	if paramValue := ctx.QueryParam("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
