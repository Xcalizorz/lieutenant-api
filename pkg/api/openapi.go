// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Cluster configuration catalog Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Tenant configuration Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------
	if paramValue := ctx.QueryParam("tenant"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------
	if paramValue := ctx.QueryParam("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
