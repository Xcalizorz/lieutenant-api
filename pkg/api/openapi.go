// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody CreateCluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/docs", wrapper.Docs)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/openapi.json", wrapper.Openapi)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8wbaU8bu/avWPOeVKoXEii0TyBdvcvSQloKlATa3oKEM3OSMXjswfYkhCr//cnLTGbL",
	"AoXe+4147HOOz76Yn57Po5gzYEp62z+9GAscgQJhfu3RRCoQ7eA0XdarAUhfkFgRzrxtb59IRZivEAkQ",
	"7yMVAvLtsabX8IjeEmMVeg2P4Qi8bc9PgXoNT8BdQgQE3rYSCTQ86YcQYY3k3wL63rb3r9aUvpb9Klvt",
	"wJtMGl4XGGbqscQpc2oGbcqB/DXSJvq0jDmTYNi4D32cUKX/9DlTwMyfOI4p8bGmtHUjNbk/l0RyBljv",
	"N4iK991BgcWFUgLQiKgQYSTMmaZhnIOTk7Chh9KTvrf9Yz7uTCW8SWOpnVZKy+4+FTwGoQhIb3I1aaT0",
	"fcC+1c/idc0ywj2eKIRTtUO8dwO+aqKOwor4mNIx8jnrk0EiIEC3MG4NMU0AxZgIqRUB7nEUUzDyoTwJ",
	"vG0Pj6TX8AIilSC9xKHjMTAZkr7aNPoxsKuQrI5AqtV1b9Lw1DjWemRJ8KYXaAfGuqa32/7pkWBJRZ+q",
	"4g996Go2mtMCgrJupAwKoE/0YsqpS9YNAR0QrTUxl0RxMUZEokQmhnsRZngAAeqNjQXtnLYRZgHCieID",
	"YCCwgsABkTLch5jy8ScYoxGhFPUgf76jYISFtq8iLwIiY4rHx8YMa6xYf0T6a8nH5KXnfR6jIWjSo5gL",
	"hZnK7XIc0/JkA82xfqpSS2ilVb9JwxsQdQYxX3TswG2baCcjFab0/Oyoeq/zsyOkOOqD8kPkNmpmkT5I",
	"JVGfi5RfmejwAJhqom5IpGUvZ3SseSxBIVJgzSuJFL8FpiUpld47xJQEBYX3QqViud1q4Zg05Zg1hzJk",
	"TQaq5chpSUtAU3uo/xl4f1wma2sbvgRfgOrqFbMAxiZwcMLoOPWZJabPsQ/nJSo2orL1IuvaJX+OlOZI",
	"yqUeUM4G+v6Fy0YJVcTnIvbqSMtbmUNba2kCsIKn+s1f84YHU/UrsmPP+TcTTUqW3MjsODPWnCVXLTE1",
	"3yqWTucQxUmPEl97UdRCdq/5oZXVsd8vEONjhSkflIhyKuxQG29T9RJFVZUyXIXgzdu361toZ2dnZ2/j",
	"+AHvrdO/9tvrx933b/Vae/9gC7/9OjpKRv7957NxcHzX3uT95OFb4ovdT/HByfD0Yuv0ZHOQ3FyyOrcQ",
	"cqk+wVjW3/6W8RFDeo9M9W9AFJIghiDQilEwShigmEtJehQMX8xyTEEzSr4uXGpAFMW9ps8jtNT9dvrJ",
	"3uGni+7NXXI/VO/2Pr9TwcFm5yhe31WsxU7g8PD92/OTh7Ogf8lywMEPJF6VIX6zyohU8Zu37wyS928u",
	"bv46PA6Pvh3z79226kX0ITjcGR93vxt8xd+7u7sfOp/vHj7CxZY4fzjfvP1K1MENnG2efu3gN1ud07uP",
	"6/2L21DdbByOtu5vji6+XXwX51tf6Pev4uTo22785d2nrze9m+5+N9i/5Tz88DDovf/+R70w7IIWhEug",
	"PB1zvHLW04nBJ30CUntAbLQMyZAnNChFn1ReOgsTnFIQTbSDbDbA++hVwtzmVygCzCQi6pVEjCsNJAdj",
	"er4gTEdc5RqJoDW5S0Ip0hEgp0ea8rLOb7daA6L+HBAVJkaWLexHoL2YXuexXI3GacI9IMpbyuvadKSc",
	"HySM3GlOmG2IBMCUZqtAFlQT7SSKR1lSVedOkLZ47SG16a8QZtb7XETo0rNxg4JSIGzIWLVLONAIyRAK",
	"q4wnrLAQkAFR0i5demgUggCkQ6YFKREWgCgfgfCxhAaK8D16t4H8EAvsmw2aHq4wfd00+rYgXDW8NhsC",
	"0+6qJgCln1CAFdZCxLlso+hS/WmwqKAgeRQlOZWCUgqmLiq5kqBGqDbxN35oWpSUKRQzjuuUzgGIQEo8",
	"gIJ67oKPE2lsx+6SCyOrw1R3h2kOsFxITeu/hdHUbiwH0+z4iybmFdw1InIpTDUtbyvkY+bSGZ0qYsZV",
	"CCJLerjWfz4y0nVrIQGBhR8SkM+V2O9QiqYcQnDvQ6yQLpmNyXFzE0zztt98WobPchm+y8Hy+rbjR4D2",
	"uIibdW728cn5rOyyW8or3d9LpJUsoRT39PKSGbAux8FPBFHjjibQMmsXsACxk6hQ/+qZXx+4iLCOgR+/",
	"dj1XxGtI9uuUITqlt70Bwvo8bTpg39wTIkyot20+/WmSfT/X/rjoHB6jnQPPhaysOkg3VvoNp4KbWNEZ",
	"M/TZKFMETLm8khIfmDTSdvB3O/toY3WPGqdx5D6Xkfkh5xKwO20invtbtnoyWN1Y9Q2AlpEgUUYGRwQS",
	"JyWLfAhCWhrXmmtNU5vr8h3HxNv2NpprzTdaQ7EKDb9bzreaHwOoUYkjIpXWzHQjwkNMjKiRi3IWr1Z5",
	"YwHasZhTeynoRqG79qOSEBCqa5cMgTZKeyMSFNMMeOD8XdrAuktAjMsdLC/fryrr4FWpPfVmbe1RrSmi",
	"IFq2cs71RLAQeFzXtHJbETXNukETvY9iNUZmv87oGHeMyDG9aXUx66vVkZJdspU24Iy1JVGEdbj1zkAl",
	"gkmEDea8cLUx4YEsBN1Jw4u5rNEMWxDm+k9TfXAOuL2vnW5tulRIka79pydE1zYfumQ6IdIQR1wEj0yJ",
	"dLgJwb+VaSfB6R/cE13w9KDPBTgXr+NRmOaKDWTC0ohIQH1MqLTA0htLs/Xayfk6TTB1qCFKomt7G+eX",
	"dTKfXknvuO5xrqQSODa9hmubrpu+XdHWioW5Dc4g1S4Pxs/WeS3iqNPlVBkYjFCRlmkzeVIxwPXno3AO",
	"bU4/jQBBp03e5iNN/2ld6QwxZq90FC1S8LbGpNJuF9Up+tgp4DOYvBWPdPLJdQcr1j5pTINC62c2s5hY",
	"YimouizGrMtCJVDUUbtjqhelgFB3pemWVs04psaZb87mpyXc8X3jN0reICa2DOmRIAD2DMKsY3ed266N",
	"55nzt33RBGS5hitK7gDUy4pt7Xe6gD5PmFODzXmTAjM80s5buhZLgEiARlhqQzZAnjUQz5RFbTTGyg9r",
	"mupxgOcbod3x7NJcJtpEIAawaij/z5OEmi9iq+K1NytKL1e4KW6cb2h7WStnH/bQfze23r1eIkD9Vu1M",
	"zDX+BjdlET+rk6pTx/poE3B/dvnRZgp0ykaGNm8MuJ/oUss22npYQqDL784IDwYg0Hm1FNnX4BfKVcG9",
	"aoUqokW2lkuICgeniBGWEnSwzlW23vaPqzxTKjfIMUWOpYLI8SQETFX4MJMtGpDdYzPXyq0PHYDlLh5T",
	"TEoKNS27+G1Nc6s6gadUJ/t9wuDp2jOHbaXb1nKtbnY3m4X5Zg/62Dk5Nu1tTJjO8dNqggEEEKCpHzQt",
	"pxAP9aZ0SJnEJmMXCdNnbQ3QVlkJIHgyCA3Eae28V5jZGxfVJyzI1RYo0t4yrTfcRNMVTQRogK51bGoW",
	"q4Sm2XddW9OkM1EzDUUrBoish2K22DJkDi6z65wpQq9NFdV3oAOgZKhZpdEaxmpA2jgWUe/wKo6u+5hK",
	"uK5WO20r49w8fV5voc2IIpiiDI9lw6wegvv2ci2EchOsYkafkh4IZtK76UBc8WxK7u7dyA+87XDcRo31",
	"mqaeUx3D3Jm5T6qQjKtplvSsVpxmO5ry1HKMdri7WZee3jpn45nwYi2E1NRz44Na++4AFuZ5QX5eUVGn",
	"L1oDpuOOherUp8n9lyNkFMeNhwo9qs77o/d7XXS00+muuFZcw7yteY0+nJ18RtnMaoYK3r2o+s1t7WdM",
	"qFHLL/a+ie8bf/iMuW9RPgj7PhcBsV3/lDepIkyFPrsr9VUQBYukbpOTvNhfomkyl6Pz52hL9U3mApSK",
	"i2cR1AyG1slEG6ZrNs+PvScxMB3Ujfm7EstPE6KiqE5c8/qlHW+FpLm+rLp7RkriGrgL2+sm3yg3exd1",
	"2LsO+C/yJvNeP0rTKm+XDLKxUzZlygYWudF8jwzMZN7nUcQDLmDVPoZxk3kSTNv3k0YZy3S6hVY6Sc81",
	"X3kfpehfL0KfvQyYh5/LDR82vOn0K6PoqrFcbz97xLSwtW93/gM6+ypTkVQ90ydei/v66RTmyW199be3",
	"9UudeCuWrBHviM09ktVRWMbYB7SSzopNFwhHkPtmX2CkdxYJk68da/xEKh6BcDDLI+gVQ8Wstv9rzVac",
	"f2pyyXJcTmvd9KVz8bkZFyiRabUQCz4kum5xMwOTnF87E7o2aFyHWYLKj68bWjVnzyXSh604CCCYNYno",
	"ppO4l4ip1ScNC2YRKk/Nr44icg+mZ7mwZ3FV2aQzc1XTWfuk8ShWzfFOv30ekuJddhzi9r/wNCTTkIqH",
	"zAXw1s/0XySWnIRkUOsGIZmJPK4FW/3Hj+XGIN30nc1vnoLk8b7cEGS2/B45ApkhsgNQLymvtWf2jXME",
	"sWj64QL+3zv8mCfOhaOPGSK0G55Zii8791gm0LmxR15s/7Spx0Kd/O0zjwLeFxp5zAkpxaKy+OLtx5XW",
	"LPuo3qpm8YVY5Z9VvHnv0nJPw04FDxLf+GBdS+oSrAJ5NYDh06B3QaoS3OrZI+5jigIYAuVxZPqVVxl/",
	"flZecRUP557Y5Woaja74v5ULDmbPnHIni83FWQOy4q7ccZLrIdUfnXZOFInApfGmiZID43oGjZoxj/s0",
	"uZr8PwAA///cD2uttDoAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
