// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody CreateCluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/docs", wrapper.Docs)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/openapi.json", wrapper.Openapi)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8w7e08bu5dfxZpdqa02JFBoVyD9tDdAC2lToCTQ9raVcGZOMgaPPdiehFDlu6/8mMm8",
	"8oBC7/2PeOxzjs/7YX55Po9izoAp6e398mIscAQKhPl1QBOpQHSCs3RZrwYgfUFiRTjz9rxDIhVhvkIk",
	"QHyIVAjIt8eaXsMjekuMVeg1PIYj8PY8PwXqNTwBtwkREHh7SiTQ8KQfQoQ1kv8WMPT2vP9qzelr2a+y",
	"1Qm82azh9YFhph5KnDKnFtCmHMjfI22mT8uYMwmGjYcwxAlV+k+fMwXM/InjmBIfa0pb11KT+2tNJOeA",
	"9X6DqHjfNgosLpQSgCZEhQgjYc40DeMcnJyEDT2Ung69ve/LcWcq4c0aa+20Ulp395ngMQhFQHqzn7NG",
	"St977Fv9LF7XLCM84IlCOFU7xAfX4Ksm6imsiI8pnSKfsyEZJQICdAPT1hjTBFCMiZBaEeAORzEFIx/K",
	"k8Db8/BEeg0vIFIJMkgcOh4DkyEZqh2jHyO7CsnGBKTa2PJmDU9NY61HlgRvfoFOYKxrfru9Xx4J1lT0",
	"uSp+14d+LkZzVkBQ1o2UQQEMiV5MOfWD9UNAR0RrTcwlUVxMEZEokYnhXoQZHkGABlNjQe2zDsIsQDhR",
	"fAQMBFYQOCBShocQUz79CFM0IZSiAeTP9xRMsND2VeRFQGRM8fTEmGGNFeuPSH8t+Zi89LxPUzQGTXoU",
	"c6EwU7ldjmNanmykOTZMVWoNrbTqN2t4I6LOIearjh25bTPtZKTClF6cd6v3ujjvIsXREJQfIrdRM4sM",
	"QSqJhlyk/MpEh0fAVBP1QyItezmjU81jCQqRAmteSKT4DTAtSan03jGmJCgovBcqFcu9VgvHpCmnrDmW",
	"IWsyUC1HTktaApraQ/2fgfefH8nm5rYvwReg+nrFLICxCRycMjpNfWaJ6Uvsw3mJio2obL3Iuk7JnyOl",
	"OZJyaQCUs5G+f+GyUUIV8bmIvTrS8lbm0NZamgCs4LF+8/e84dFc/YrsOHD+zUSTkiU3MjvOjDVnyVVL",
	"TM23iqXXO0ZxMqDE114UtZDda35oZXXs9wvE+FhhykclopwKO9TG21S9RFFVpQw3IHj95s3WLmq32+2D",
	"7ZN7fLBF/z7sbJ30373Ra53Do1385sukm0z8u0/n0+DktrPDh8n918QX+x/jo9Px2eXu2enOKLn+werc",
	"Qsil+ghTWX/7G8YnDOk9MtW/EVFIghiDQC+NglHCAMVcSjKgYPhilmMKmlHyVeFSI6IoHjR9HqG17tce",
	"JgfHHy/717fJ3Vi9Pfj0VgVHO71uvLWvWIudwvHxuzcXp/fnwfAHywEHP5B4Q4b49QYjUsWv37w1SN69",
	"vrz++/gk7H494d/6HTWI6H1w3J6e9L8ZfMXf+/v773ufbu8/wOWuuLi/2Ln5QtTRNZzvnH3p4de7vbPb",
	"D1vDy5tQXW8fT3bvrruXXy+/iYvdz/TbF3Ha/boff3778cv14Lp/2A8ObzgP39+PBu++/adeGHZBC8Il",
	"UJ6OOV456+nF4JMhAak9IDZahmTIExqUok8qL52FCU4piCZqI5sN8CF6kTC3+QWKADOJiHohEeNKA8nB",
	"mJ8vCNMRV7lGImhN7pJQinQEyOmRprys83ut1oiov0ZEhYmRZQv7EWgvptd5LDeiaZpwj4jy1vK6Nh0p",
	"5wcJI7eaE2YbIgEwpdkqkAXVRO1E8ShLqurcCdIWrz2kNv2XhJn1IRcR+uHZuEFBKRA2ZGzYJRxohGQM",
	"hVXGE1ZYCMiIKGmXfnhoEoIApEOmBSkRFoAon4DwsYQGivAderuN/BAL7JsNmh6uMH3VNPq2Ilw1vA4b",
	"A9PuqiYApZ9QgBXWQsS5bKPoUv15sKigIHkUJTmVglIKpi4quZKgRqg28Td+aF6UlCkUC47rlM4BiEBK",
	"PIKCeu6DjxNpbMfukisjq8NUd4d5DrBeSE3rv5XR1G4sB9Ps+LMm5hXcNSJyKUw1Le8o5GPm0hmdKmLG",
	"VQgiS3q41n8+MdJ1ayEBgYUfEpBPldi3KUVzDiG48yFWSJfMxuS4uQmmedtvPi7DZ7kM3+VgeX1r+xGg",
	"Ay7iZp2bfWhyXnWMujYGPxFETXt6t6V8H7AA0U5UqH8NzK/3XERYB6QPX/qeq6g1JPt1Tp3Or22hTtiQ",
	"px0A7Bs1hwgT6u2ZT3+ZzNvP9SIue8cnqH3kufiRperpxkrxfya4cdy9KUOfjGQjYMoleZT4wKRhvYO/",
	"3ztE2xsH1Fhw130uI/NDziVgd9qEH/e3bA1ksLG94RsALROuiTJi6hJInDZa5GMQ0tK42dxsmkJZ19I4",
	"Jt6et93cbL7W6oJVaPjdco7O/BhBTfbfJVJpNUk3IjzGhGKdb7mQY/Fq/TPqqK3cnDpIQTcKra7vlehM",
	"qC4kMgTaQuyNSFCM+XDP+du0m3SbgJiW20levnlU9o4/S72i15ubD+oTEQXRumVsrkGBhcDTug6S24qo",
	"6ZyNmuhdFKspMvt1esW4Y0SO6U2ri1mTq46U7JKttBtmrC2JIqxjn3cOKhFMImww54WrjQmPZCECzhpe",
	"zGWNZtjqLNcMmuuD84adQ+0Ba3OXQr5y5T8+O7myyckPprMTDXHCRfDA/ET7/hD8G5mW9U7/4I7o6mMA",
	"Qy7A+VsdHMI0cWsgEyMmRAIaYkKlBZbeWJqtV07OV2m2p/0+URJd2ds4J6kz6/RKesfVgHMllcCxKfyv",
	"bO5smmhFWytWyTZSglT7PJg+WRu0iKNOl1NlYDBBRVrmnd1ZxQC3no7CJbQ5/TQCBJ3DeDsPNP3HtYgz",
	"xJi9ULo+KlDwpsak0tYT1fny1CngE5i8FY908sm16irWPmvMg0LrVzZAmFliKai6lMKsy0JaXtRRu2Ou",
	"F6WAUHel+ZZWzWykxpnvLOanJdzxffsPSt4gJrYmGJAgAPYEwqxjd53bro3nmfO3TcoEZLmgKkruCNTz",
	"im3zT7qAIU+YU4OdZW17M8nRzlu6fkeASIAmWGpDNkCeNBAvlEVtNMbKD2s63HGAlxuh3fHk0lwn2kQg",
	"RrBhKP+fRwk1X1FWxWtvVpReropS3Djf0DaWXp6/P0D/u7379tUaAeqPamdirvEPuCmL+EmdVJ061keb",
	"gPuLy48OU6BTNjK2eWPA/USXWrbrNcASAl0L9yZ4NAKBLqqlyKEGv1KuCu5UK1QRLbK1XEJUODhHjLCU",
	"oIN1rrL19r7/zDOlcoMcU+RUKogcT0LAVIX3C9miAdk9NnOt3PrYAVjv4jHFpKRQ87KL39R0mqrjcEp1",
	"sj8kDB6vPUvYVrptLdfqBmmLWZjvvKAPvdMT02vGhOkcP60mGEAAAZr7QdP/CfFYb0onhklsMnaRMH3W",
	"1gAdlZUAgiej0ECc184HhQG6cVFDwoJcbYEi7S3TesONF13RRIAG6ErHpmaxSmiafVe1NU06oDSjSfTS",
	"AJH1UMwWW4YswWV2XTBF6JWpooYOdACUjDWrNFrDWA1IG8cq6h1exdHVEFMJV9Vqp2NlnBtuL+stdBhR",
	"BFOU4bFsWNRDcN+er4VQboJVzOhjMgDBTHo3n04rno2s3b0b+emznVTbqLFV01h2qmOYuzD3SRWScTXP",
	"kp7UitNsR1OeWo7RDnc369LTW+dsPBNerIWQmnqul19r3z3Awsz688ODijp91hownz2sVKchTe4+d5FR",
	"HDerKfSoeu+67w76qNvu9V+6VlzDPHR5hd6fn35C2QBpgQrePqv6Le2zZ0yoUcvP9r6J7xt/+IS5b1E+",
	"CPs+FwGxLfiUN6kizIW+uCv1RRAFq6Ruk5O82J+jabKUo8uHWmv1TZYClIqLJxHUAobWyUQbpms2L4+9",
	"pzEwHdSN+bsSy08ToqKoTl3z+rkdb4Wkpb6suntBSuIauCvb6ybfKDd7V3XY+w74b/Im817fS6Mjb5+M",
	"shlQNvLJBha5OfmAjMyY3OdRxAMuYMO+THFjchLM2/ezRhnLfNSEXvaSgWu+8iFK0b9ahT4b0y/Dz+W2",
	"D9umaF2rk5+9H1rZyLc7/wV9fJUpRKqM6euq1V38dOby6Ca++seb+KW+uxVL1nZ3xObep+qYK2PsA3qZ",
	"jmlNzwdHkPtmHz+kdxYJk68ca/xEKh6BcDDL09+L865mXerLF3Xu++nk6jliUHUev6J3r/LU/G7rPvfa",
	"d5HJP4lpZ67lQVxZYsp/fFSQ4l13UuD2P/OgIFOGijvJxbbWr/Qp/5pDggxq3Ywgs4aHdSer/6Cw3oSg",
	"n74H+cMDgjze55sPLJbfA6cDC0R2BOo55bX5xG5wiSBWDQZcdPxn5wLLxLlyKrBAhHbDE0vxeUcC68Q0",
	"NxHIi+3fNhBYqZN/fBxQwPtM04AlIaVYbxUfg33/qTXLPv62qmkfT7UqL5S73McUBTAGyuMI3H8AFJ9a",
	"Vf4Fw1v2wCv3xupM8CDxjcfWRVkt5A3C1OOgd5iCkXvLvxh8AOPHgT+EsQX7M+P+r8rzqSKk3Nu2XHmh",
	"6Sr+h+GKg9n7otzJYldv0WSquCt3nOSaN/VH5y0LRSJwsyLTvciBccV6o2a+4j7Nfs7+PwAA//+G9JFZ",
	"ujkAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
