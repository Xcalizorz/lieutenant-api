// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Annotations defines model for Annotations.
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Revision defines model for Revision.
type Revision struct {

	// Revision to use with a git repository.
	Revision *string `json:"revision,omitempty"`
}

// RevisionedGitRepo defines model for RevisionedGitRepo.
type RevisionedGitRepo struct {
	// Embedded struct due to allOf(#/components/schemas/GitRepo)
	GitRepo
	// Embedded struct due to allOf(#/components/schemas/Revision)
	Revision
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string            `json:"displayName,omitempty"`
	GitRepo     *RevisionedGitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// Full URL of the global configuration git repo
	GlobalGitRepoURL *string `json:"globalGitRepoURL,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody CreateCluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/docs", wrapper.Docs)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/openapi.json", wrapper.Openapi)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
