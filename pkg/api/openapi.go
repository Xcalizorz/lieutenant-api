// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// URL to Kubernetes API endpoint of the registered Kubernetes cluster
	ApiEndpoint *string `json:"apiEndpoint,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Cluster configuration catalog Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// Identification of the cluster (shortname or slug)
	Name string `json:"name"`

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	SshDeployKey *string `json:"sshDeployKey,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Tenant configuration Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// Identification of the tenant (shortname or slug)
	Name string `json:"name"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------
	if paramValue := ctx.QueryParam("tenant"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------
	if paramValue := ctx.QueryParam("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
