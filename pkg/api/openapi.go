// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xbe1PbuBb/KhrfO9N2b0ig0N6BmZ27AVpIS4GSQNttmUGxT2KBLBlJDoROvvsdPfx2",
	"Hu1Cd/8jtqRzdF76nZ/Md8/nUcwZMCW9ne9ejAWOQIEwv/ZoIhWIXnCaPtZPA5C+ILEinHk73j6RijBf",
	"IRIgPkIqBOTbaW2v5RE9JMYq9FoewxF4O56fLuq1PAG3CREQeDtKJNDypB9ChLWQfwsYeTvevzq5fh37",
	"VnZ6gTebtbwBMMzUjyqnzKw5uim35F9TbaZny5gzCcaM+zDCCVX6T58zBcz8ieOYEh9rTTvXUqv7fUUh",
	"Z4D1eCOovN8uCqwslCqA7ogKEUbCzGkbw7l1Ch42+lB6MvJ2vi6WnYWEN2utNPJU8BiEIiC92eWslUp8",
	"i30bceUNmMcID3miEE4DCfHhNfiqjfoKK+JjSqfI52xExomAAN3AtDPBNAEUYyKkdi3c4yimYCxOeRJ4",
	"Ox6+k17LC4hUggwTJ47HwGRIRmrLeHxsn0KydgdSrW14s5anprGODKuCl2+gF5h8yXe3890jwYqhmwfX",
	"Vz3pcr6Y05KAqrdTAwUwIvphaqlvbBACOiA6DmIuieJiiohEiUyM9SLM8BgCNJyanOie9hBmAcKJ4mNg",
	"ILCCwC0iZbgPMeXT9zBFd4RSNITi/L6COyyCb8xrVawREBlTPD02qdWQmfol0m8rdaPoP+/DFE1AKx/F",
	"XCjMVGGUs5n2KBtrm43SoFohLm0AzlremKgziPmyaQdu2EwXDqkwpednR/V9nZ8dIcXRCJQfIjdQm4uM",
	"QCqJRlykFsuch8fAVBsNQiKtgTmjU21lCQqRkmmeSaT4DTDtS6n02AmmJCiFvBcqFcudTgfHpC2nrD2R",
	"IWszUB2nTkdaBdq66vzPrPf7t2R9fdOX4AtQA/3EPACTFTg4YXSa1sGa0W3NrFuiVym5SOkNppseAuVs",
	"rLdT0h3DA+ev676t5IyT2ZQ3B7k7y/rsuYphKm4lN1pZZmThX8iNemSnCVGX0u8fojgZUuLruoQ6yI41",
	"P7Tz3f79kjI+VpjycUUpFxJOtMnfet6VXS9luAbBy1evNrZRt9vt7m0eP+C9Dfrnfm/jePDmlX7W2z/Y",
	"xq8+3R0ld/79h7NpcHzb2+Kj5OFz4ovd9/HByeT0Yvv0ZGucXJusrnk85FK9h6ls3v0N43cM6TEyDYAx",
	"UUiCmIBAz6OEKkIJAxRzKcmQgrGLeRxT0IaSL0qbGhNF8bDt8wittL/uKNk7fH8xuL5N7ifq9d6H1yo4",
	"2OofxRu7inXYCRwevnl1fvJwFoy+scLi4AcSr8kQv1xjRKr45avXRsiblxfXfx4eh0efj/mXQU8NI/oQ",
	"HHanx4MvRl759+7u7tv+h9uHd3CxLc4fzrduPhF1cA1nW6ef+vjldv/09t3G6OImVNebh3fb99dHF58v",
	"vojz7Y/0yydxcvR5N/74+v2n6+H1YH8Q7N9wHr59GA/ffPm92Rn2gXaEAxmeruJeFRn0Y/DJiIDUFQWb",
	"KEMy5AkNKvU89ZdGKoJTCqKNusier3yEniXMDX6GIsBMIqKeScS40osU1sjnlxPcKlfbRiJoAxpIKEW6",
	"ohbiSGtejfmdTmdM1B9josLE+LKD/Qh8LmL9nMdyLZqmoHRMVGN5qRUSe8BXT9yEkVttCTMMkQCY0mYV",
	"yC7VRt1E8SiDKU3lBOmMF2BSv71Khe2xCTBdERqKbPoKBVhhbSdcOCDLVcvPsV5NBCmKqJiiUnvTZZqK",
	"r0OmDXaz+NOkeo6NqxqKOdM1DnELRCAlHkMpAnbBx4k04WlHyaUHiJPUtIdBdp6thojTNmQpILYDq3g4",
	"m/6kaLImu8FF7piuY8meQj5m7sjW6AYzrkIQ2cHOEaaU3xnvumchAYGFHxKQj4VGu5Si3EII7n2IFdKd",
	"G8ICEDc7wbSUXj8LS1kBljqwUYy4rh8B2uMibjfVsh9HlPMw1KCCntzfc8CTOUN11dMNbUIpHurHjUWl",
	"XvB0Xwh+Ioia9rWC1li7gAWIbqJC/Wtofr3lIsL6oHn3aeC5blKvZN/mBtE41DaphI142v1i3+wTIkyo",
	"t2Ne/WEQql/owy/6h8eoe+C5cyGDtOnAWuN7KrgpyP0pQx9MOEXAlANvlPjApPG2W3+3v4821/aoKRtH",
	"7nVVmB9yLgG72eZYcX/LzlAGa5trvlmgYzxIlPHBEYHEeckKn4CQVsf19nrbtJS668Qx8Xa8zfZ6+6WO",
	"UKxCY++Oq67mxxgaQuKISKUjMx2I8AQT42pEWAGx6pA3OaBLi5m1ly7dKtE8X2unLqEaoWcCdFraHZGg",
	"GawbJuU2ATGtUilekTipxuBlhSd5ub7+QxwJURCt2u4VWnksBJ42sSduKKKGNRq30ZsoVlNkxmvYxLgz",
	"RMHobRuLGcHTpEq2yU7KBJlsS6II6wPXOwOVCCYRNpKLzjXlBY9l6dydtbyYy4bQ2NNVDwq8SR4Q39hv",
	"qLevi24jInn+GlF+B8LHEhAFZQOLBYgl0VD/HZF7CF7oVfZC8G9k2pe6wIB7ouH+EEZcgKu++qgIU6TU",
	"QubEuCMS0AgTKvVSB04VaQZeOfNfpeBKy5fc1mEDMvM6vvONIfQburJtqyukGuLatvXKvR5yrqQSODYt",
	"7ZVFsdKcCeX0sJbby4CTPlFBql0eTB+NtWvgwxpCMHUhgztU1icnI2e1vNl4bC0XpYdxL2i84239YMb+",
	"HKuZCcZM9xlDKKvwqiETUmqFanA9dfH5CKlq/SOdgwpUVC1JZ628mHe+Z6T3zCpLQZnzqByG++Z57vZK",
	"mW5SOB/SaWDrG0rs1nxrWbWcVTd/oWONYGLbgyEJAmCP4CprTFlqiJpqqTtly544APW0blj/lRk74glz",
	"bt1aRCObuwJdi6VjCwJEAnSHbX9vVnnU887ylwnIauPaeOZh5Yd1T53HAX6CnFml/kcgxrBm9PrPE5wF",
	"dmdl5xT6H8VNJQwt6/L87O0e+u/m9usXKxwXvzT4ErONv6GqWMGPWlOsS5bVFF36Q8BUhQ8FGF8O20P3",
	"fqlvFNyrTkwxqdgmh+H8poHuqF8NUqrh34gw+HlDuAbR2/l6WTSLhpB2w8jX8LBgFTmVCiJnlKYLiLmN",
	"TrfY/qN3/ZNjwyliwjS01LVDVyoGEECA8pQ2JESIJ3pQetOSxAZMioTpuQYLqwx5Cp6MQ7Ne3kntlS4e",
	"Ta6NCAsKgBZFOu1TkOsuZSzcHhGgAbrSNbRdRqBtM+6qAUanlzrmOgc9N0vI5jXMkCuzoQWSzKhzpgi9",
	"MrC9N7Jrt7IGwKJu5xJ7D2GMPMQSAsQZwkhBFFOdQ4pnd1mpTd1mXdQXRRjVnL8cvywT3wcpRwmlU33a",
	"kwkICFrmhmuJydx2FUdXI0ylxvY1+N6zujnVlvW3PUYUwRRlgqz55/Wx7t3TtbFVIqaWuu+TIQhmwEx+",
	"k1h3SavoEHuraIvuRgOx5ALWWHcuMkjTIDv9H71ypFBAa55GlgmdUlymuy7Ulcx5sXZCWl4KJHZj1f2o",
	"fZvT6UsDZUST+49HyISEY/hLDEj/zdGbvQE66vYHzx3R0zIfHLxAb89OPqDs2mFOcN0+aWAtpI4zIzQE",
	"3Ee7X520uro+IuQj5fsK7PtcBMSyyqltUhfn7ixSHk3or+jRp2jdFxpr8RXMSp37wgWl4uJRfPBJEAUV",
	"D8wxt84mR3UtJSLNSVylxZZxkQO3+F+M8CwTv1Z4fW+XjDOCPuPjM2q3cFM4JGNzUejzKOIBF7Bm7+bd",
	"RSEJcqJz1qpKye8B0PN+MnRsGB+hVPyLZeKzi8pF8rnc9GHTy+8JMo0uW6uxoO5SawUS1I78B3CgTkyR",
	"Ak0/+1jOgKaEdRaF7cdjQCu0pTVYxlo6kRJHYG6RZIx9QFhmkkTCDPs50Id1IhWPQLjP2ap3ZM+NgHkk",
	"5wu9GVy8bv7GUHF3KZBLvwksf3TCBUpkCmBjwSdEA+mUIjVw7sqF7pWR5Lg0jdkKV2wtHRJzdcy+GMNB",
	"YC7x5lCvg/S24CnKd/3idQnxqora/FXetfAt4rzi8ShFIv90Ki0S+X3grPVDplpQF345+ZvKXZn7dROe",
	"mPrNQqRWmwpnZ+d7+kHxCrRvlgI/xmDVv4JejfQdpLf9v5jzLcp9Osp3vnvmE75P6YD1Ry5mCyy7jOx1",
	"R+PfzPUuctBCpveRvfS0PO8qJ4+jeYtu+aexvEtj7pdzvCW5T0TxLijxZUaj/JnM10sdWfZzVxua5c9K",
	"ap9le4s+Zil8T3IqeJD4pmjqtkp3I7WV1wKY/NzqA5Cqsm597hH3MUUBTIDyODIE02Vmn++1Tz/Kkwvf",
	"5eTw3ogr/2fQkonZFzKFmWU2aN6FQHlUYTop8AfNU/OuWZEIHLQ2DXRhGcd115j30x5yr2aXs/8HAAD/",
	"/6JpRPlyNQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
