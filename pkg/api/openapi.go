// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// URL to Kubernetes API endpoint of the registered Kubernetes cluster
	ApiEndpoint *string `json:"apiEndpoint,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Cluster configuration catalog Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// Identification of the cluster (shortname or slug)
	Name string `json:"name"`

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	SshDeployKey *string `json:"sshDeployKey,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Tenant configuration Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// Identification of the tenant (shortname or slug)
	Name *string `json:"name,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------
	if paramValue := ctx.QueryParam("tenant"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------
	if paramValue := ctx.QueryParam("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
