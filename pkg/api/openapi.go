// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Annotations defines model for Annotations.
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody CreateCluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/docs", wrapper.Docs)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/openapi.json", wrapper.Openapi)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Jv8LAAD//6K6Y864OgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
