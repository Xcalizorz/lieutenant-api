// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody CreateCluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/docs", wrapper.Docs)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/openapi.json", wrapper.Openapi)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eDoAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
