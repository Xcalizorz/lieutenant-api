// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// URL to Kubernetes API endpoint of the registered Kubernetes cluster
	ApiEndpoint *string `json:"apiEndpoint,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Cluster configuration catalog Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// Identification of the cluster (shortname or slug)
	Name string `json:"name"`

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	SshDeployKey *string `json:"sshDeployKey,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Tenant configuration Git repository, usually generated by the API
	GitRepo *string `json:"gitRepo,omitempty"`

	// Identification of the tenant (shortname or slug)
	Name string `json:"name"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------
	if paramValue := ctx.QueryParam("tenant"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------
	if paramValue := ctx.QueryParam("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
