// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Annotations defines model for Annotations.
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Revision defines model for Revision.
type Revision struct {

	// Revision to use with a git repository.
	Revision *string `json:"revision,omitempty"`
}

// RevisionedGitRepo defines model for RevisionedGitRepo.
type RevisionedGitRepo struct {
	// Embedded struct due to allOf(#/components/schemas/GitRepo)
	GitRepo
	// Embedded struct due to allOf(#/components/schemas/Revision)
	Revision
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string            `json:"displayName,omitempty"`
	GitRepo     *RevisionedGitRepo `json:"gitRepo,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody CreateCluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/docs", wrapper.Docs)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/openapi.json", wrapper.Openapi)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tDsAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
